generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String    @unique @default(uuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @map("updated_at")
  updatedBy   String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedBy   String?   @map("deleted_by")

  users User[]

  @@map("departments")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String     @map("password_hash")
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  products      Product[]
  warehouses    Warehouse[]
  suppliers     Supplier[]
  costCenters   CostCenter[]
  requisitions  Requisition[]
  productQuotes ProductQuote[]
  purchases     Purchase[]

  @@map("users")
}

model Product {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  status      Int
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  user        User      @relation(fields: [createdBy], references: [id])
  updatedAt   DateTime? @default(now()) @map("updated_at")
  updatedBy   String?   @map("updated_by")

  productMovements ProductMovement[]
  requisitions     Requisition[]
  productQuotes    ProductQuote[]
  purchases        Purchase[]

  @@map("products")
}

model Warehouse {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  status      Int
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  user        User      @relation(fields: [createdBy], references: [id])
  updatedAt   DateTime? @default(now()) @map("updated_at")
  updatedBy   String?   @map("updated_by")

  productMovements ProductMovement[]

  @@map("warehouses")
}

model Supplier {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String
  status        Int
  createdAt     DateTime       @default(now()) @map("created_at")
  createdBy     String         @map("created_by")
  user          User           @relation(fields: [createdBy], references: [id])
  updatedAt     DateTime?      @default(now()) @map("updated_at")
  updatedBy     String?        @map("updated_by")
  productQuotes ProductQuote[]
  purchases     Purchase[]

  @@map("suppliers")
}

model CostCenter {
  id           String        @id @default(uuid())
  code         String        @unique
  name         String
  status       Int
  createdAt    DateTime      @default(now()) @map("created_at")
  createdBy    String        @map("created_by")
  user         User          @relation(fields: [createdBy], references: [id])
  updatedAt    DateTime?     @default(now()) @map("updated_at")
  updatedBy    String?       @map("updated_by")
  requisitions Requisition[]

  @@map("costcenters")
}

model ProductMovement {
  id           String    @id @default(uuid())
  productId    String    @map("product_id")
  product      Product   @relation(fields: [productId], references: [id])
  warehouseId  String    @map("warehouse_id")
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  movementType Int
  quantity     Int
  value        Int
  createdAt    DateTime  @default(now()) @map("created_at")

  @@map("productsmovement")
}

model Requisition {
  id           String     @id @default(uuid())
  productId    String     @map("product_id")
  product      Product    @relation(fields: [productId], references: [id])
  quantity     Int
  status       Int
  costCenterId String     @map("cost_center_id")
  costCenter   CostCenter @relation(fields: [costCenterId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  createdBy    String     @map("created_by")
  user         User       @relation(fields: [createdBy], references: [id])

  @@map("requisitions")
}

model ProductQuote {
  id             String   @id @default(uuid())
  productId      String   @map("product_id")
  product        Product  @relation(fields: [productId], references: [id])
  supplierId     String   @map("supplier_id")
  supplier       Supplier @relation(fields: [supplierId], references: [id])
  price          Int
  quoteDate      DateTime @map("quote_date")
  buyerId        String   @map("buyer_id")
  user           User     @relation(fields: [buyerId], references: [id])
  expirationDate DateTime @map("expiration_date")

  createdAt DateTime   @default(now()) @map("created_at")
  purchases Purchase[]

  @@map("product_quotes")
}

model Purchase {
  id             String       @id @default(uuid())
  supplierId     String       @map("supplier_id")
  supplier       Supplier     @relation(fields: [supplierId], references: [id])
  productId      String       @map("product_id")
  product        Product      @relation(fields: [productId], references: [id])
  productQuoteId String       @map("product_quote_id")
  productQuote   ProductQuote @relation(fields: [productQuoteId], references: [id])
  buyerId        String       @map("buyer_id")
  user           User         @relation(fields: [buyerId], references: [id])
  quantity       Int
  unitCost       Int          @map("unit_cost")
  status         Int
  quotes         Int
  invoiceNumber  String       @map("invoice_number")

  createdAt           DateTime            @default(now()) @map("created_at")
  financialSecurities FinancialSecurity[]

  @@map("purchases")
}

model FinancialSecurity {
  id            String   @id @default(uuid())
  purchaseId    String   @map("purchase_id")
  purchase      Purchase @relation(fields: [purchaseId], references: [id])
  invoiceNumber String   @map("invoice_number")
  quota         Int
  originalValue Int      @map("original_value")
  dueDate       DateTime @map("due_date")
  situation     Int
  createdAt     DateTime @default(now()) @map("created_at")

  accountPayableMovements AccountPayableMovement[]

  @@map("financial_securities")
}

model AccountPayableMovement {
  id                  String            @id @default(uuid())
  financialSecurityId String            @map("financial_security_id")
  financialSecurity   FinancialSecurity @relation(fields: [financialSecurityId], references: [id])
  movementDate        DateTime          @map("movement_date")
  movementType        Int               @map("movement_type")
  movementValue       Int               @map("movement_value")
  interestValue       Int?              @map("interest_value")
  fineValue           Int?              @map("fine_value")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("account_payable_movements")
}

model Client {
  id        String   @id @default(uuid())
  cpf       String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("clients")
}
